import React, { useState } from 'react';
import { Button, Modal, Table, Form, Container, Row, Col } from 'react-bootstrap';

const AccountCreationModal = ({ showModal, handleClose }) => {
  const [accountData, setAccountData] = useState({
    name: '',
    cnic: '',
    username: '',
    password:''
  });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setAccountData((prevData) => ({ ...prevData, [name]: value }));
  };

  const handleCreateAccount = () => {
    // Implement your create account logic here
    console.log('Creating account:', accountData);
    handleClose(); // Close the modal after creating an account
  };
  const handleGeneratePassword = () => {
    // Implement your password generation logic here (replace with a secure method in production)
    const PASSWORD_LENGTH = 14;
    const generatedPassword = Math.random().toString(36).substring(7);
    setAccountData((prevData) => ({ ...prevData, password: generatedPassword }));
  };

  return (
    <Modal show={showModal} onHide={handleClose}>
      <Modal.Header closeButton>
        <Modal.Title>Create Account</Modal.Title>
      </Modal.Header>
      <Modal.Body>
        <Form action='http://localhost:5000/'encType='multipart/form-data'>
          <Form.Group controlId="formName">
            <Form.Label>Name</Form.Label>
            <Form.Control
              type="text"
              placeholder="Enter name"
              name="name"
              value={accountData.name}
              onChange={handleInputChange}
            />
          </Form.Group>
          <Form.Group controlId="formCNIC">
            <Form.Label>CNIC</Form.Label>
            <Form.Control
              type="text"
              placeholder="Enter CNIC"
              name="cnic"
              value={accountData.cnic}
              onChange={handleInputChange}
            />
          </Form.Group>
          <Form.Group controlId="formUsername">
            <Form.Label>Username</Form.Label>
            <Form.Control
              type="text"
              placeholder="Enter username"
              name="username"
              value={accountData.username}
              onChange={handleInputChange}
            />
          </Form.Group>
          <Form.Group controlId="formPassword">
            <Form.Label>Password (Autogenerated)</Form.Label>
            <div className="input-group">
              <Form.Control
                type="text"
                className="form-control"
                id="password"
                value={accountData.password}
                readOnly
              />
              <Button variant="primary" onClick={handleGeneratePassword}>
                Generate Password
              </Button>
            </div>
            <small className="text-muted">Password will be autogenerated.</small>
          </Form.Group>
          {/* Add upload images fields */}
          <Form.Group controlId="formUsername">
            <Form.Label>Images</Form.Label>
            <Form.Control
              type="file"
              placeholder="Enter username"
              name="image-cnic"
              multiple
              accept='image/*'
            />
          </Form.Group>
        </Form>
      </Modal.Body>
      <Modal.Footer>
        <Button variant="secondary" onClick={handleClose}>
          Close
        </Button>
        <Button variant="primary" onClick={handleCreateAccount}>
          Create Account
        </Button>
      </Modal.Footer>
    </Modal>
  );
};

const AccountTable = () => {
  const [accounts, setAccounts] = useState([
    { id: 1, name: 'John Doe', cnic: '1234567890123', username: 'john_doe', password: '5uj66' },
    // Add more accounts as needed
  ]);

  const [editMode, setEditMode] = useState(null); // Track the currently edited account ID
  const [updatedName, setUpdatedName] = useState('');

  const handleUpdateAccount = (id) => {
    // Implement your update account logic here (e.g., send data to the backend)
    console.log('Updating account:', id, updatedName);

    // Reset the edit mode
    setEditMode(null);

    setAccounts((prevAccounts) =>
      prevAccounts.map((account) => (account.id === id ? { ...account, name: updatedName } : account))
    );
  };

  const handleDeleteAccount = (id) => {
    // Implement your delete account logic here (e.g., send delete request to the backend)
    console.log('Deleting account:', id);
    setAccounts((prevAccounts) => prevAccounts.filter((account) => account.id !== id));
  };

  return (
    <Table striped bordered hover responsive>
      <thead>
        <tr>
          <th>Name</th>
          <th>CNIC</th>
          <th>Username</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        {accounts.map((account) => (
          <tr key={account.id}>
            <td>
              {editMode === account.id ? (
                <Form.Control
                  type="text"
                  value={updatedName}
                  onChange={(e) => setUpdatedName(e.target.value)}
                />
              ) : (
                account.name
              )}
            </td>
            <td>{account.cnic}</td>
            <td>{account.username}</td>
            <td>
              {editMode === account.id ? (
                <div>
                  <Button
                    variant="success"
                    size="sm"
                    onClick={() => handleUpdateAccount(account.id)}
                  >
                    Save
                  </Button>{' '}
                  <Button
                    variant="secondary"
                    size="sm"
                    onClick={() => {
                      setEditMode(null);
                      setUpdatedName('');
                    }}
                  >
                    Cancel
                  </Button>
                </div>
              ) : (
                <div>
                  <Button
                    variant="primary"
                    size="sm"
                    onClick={() => {
                      setEditMode(account.id);
                      setUpdatedName(account.name);
                    }}
                  >
                    Edit
                  </Button>{' '}
                  <Button
                    variant="danger"
                    size="sm"
                    onClick={() => handleDeleteAccount(account.id)}
                  >
                    Delete
                  </Button>
                </div>
              )}
            </td>
          </tr>
        ))}
      </tbody>
    </Table>
  );
};

const AccountCRUD = () => {
  const [showModal, setShowModal] = useState(false);

  const handleShow = () => setShowModal(true);
  const handleClose = () => setShowModal(false);

  return (
    <Container>
        <h1 className='mt-2 mb-2 p-1'>Account Management</h1>
      <Row>
        <Col>
          <Button className='mt-3 mb-3' variant="primary" onClick={handleShow}>
            Create Account
          </Button>
          <AccountCreationModal showModal={showModal} handleClose={handleClose} />
        </Col>
      </Row>
      <Row>
        <Col>
          <AccountTable />
        </Col>
      </Row>
    </Container>
  );
};

export default AccountCRUD;
